com.snackbar.order.service.OrderService#updateOrder(Lcom/snackbar/order/domain/model/Order;)Lcom/snackbar/order/domain/model/Order;
false
4e6ed6fb8a0e9d4abb457e40ee548bb9
java.util.Optional#orElseThrow(Ljava/util/function/Supplier;)Ljava/lang/Object;
java.util.stream.Collectors#toList()Ljava/util/stream/Collector;
==
collect java.util.stream.Stream#collect(Ljava/util/stream/Collector;)Ljava/lang/Object;
findById org.springframework.data.repository.CrudRepository#findById(Ljava/lang/Object;)Ljava/util/Optional;
getId com.snackbar.order.domain.model.Order#getId()Ljava/lang/String;
getItems com.snackbar.order.domain.model.Order#getItems()Ljava/util/List;
map java.util.stream.Stream#map(Ljava/util/function/Function;)Ljava/util/stream/Stream;
reduce java.util.stream.Stream#reduce(Ljava/lang/Object;Ljava/util/function/BinaryOperator;)Ljava/lang/Object;
save org.springframework.data.repository.CrudRepository#save(Ljava/lang/Object;)Ljava/lang/Object;
setItems com.snackbar.order.domain.model.Order#setItems(Ljava/util/List;)V
setTotalPrice com.snackbar.order.domain.model.Order#setTotalPrice(Ljava/math/BigDecimal;)V
stream java.util.Collection#stream()Ljava/util/stream/Stream;